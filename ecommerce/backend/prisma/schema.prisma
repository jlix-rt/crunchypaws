// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  slug     String    @unique @db.VarChar(100)
  parentId Int?
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(200)
  slug        String   @unique @db.VarChar(200)
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @db.VarChar(500)
  stock       Int      @default(0)
  isFeatured  Boolean  @default(false)
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@index([isFeatured])
  @@index([createdAt])
  @@map("products")
}

model Coupon {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(50)
  type         CouponType
  value        Decimal  @db.Decimal(10, 2)
  minSubtotal  Decimal? @db.Decimal(10, 2)
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@map("coupons")
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model User {
  id           Int      @id @default(autoincrement())
  nombre       String   @db.VarChar(100)
  apellido     String   @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  telefono     String   @db.VarChar(20)
  nit          String?  @db.VarChar(20)
  passwordHash String   @db.VarChar(255)
  addresses    UserAddress[]
  orders       Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("users")
}

model UserAddress {
  id               Int     @id @default(autoincrement())
  userId           Int
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  alias            String  @db.VarChar(50)
  line1            String  @db.VarChar(200)
  line2            String? @db.VarChar(200)
  municipio        String  @db.VarChar(100)
  departamento     String  @db.VarChar(100)
  codigoPostal     String? @db.VarChar(10)
  referencia       String? @db.VarChar(200)
  esPredeterminada Boolean @default(false)
  orders           Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([esPredeterminada])
  @@map("user_addresses")
}

model Order {
  id            Int          @id @default(autoincrement())
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id])
  addressId     Int?
  address       UserAddress? @relation(fields: [addressId], references: [id])
  
  // Customer info (for guests or snapshot)
  customerName  String       @db.VarChar(200)
  email         String       @db.VarChar(255)
  phone         String       @db.VarChar(20)
  billingNit    String?      @db.VarChar(20)
  
  // Shipping address snapshot
  shipToLine1       String  @db.VarChar(200)
  shipToLine2       String? @db.VarChar(200)
  shipToMunicipio   String  @db.VarChar(100)
  shipToDepartamento String @db.VarChar(100)
  shipToCodigoPostal String? @db.VarChar(10)
  shipToReferencia  String? @db.VarChar(200)
  
  paymentMethod String      @db.VarChar(50)
  status        OrderStatus @default(PENDING)
  subtotal      Decimal     @db.Decimal(10, 2)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  total         Decimal     @db.Decimal(10, 2)
  
  items OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model OrderItem {
  id            Int     @id @default(autoincrement())
  orderId       Int
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     Int
  product       Product @relation(fields: [productId], references: [id])
  nameSnapshot  String  @db.VarChar(200)
  priceSnapshot Decimal @db.Decimal(10, 2)
  quantity      Int
  
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model PaymentMethod {
  id      Int    @id @default(autoincrement())
  key     String @unique @db.VarChar(50)
  label   String @db.VarChar(100)
  enabled Boolean @default(true)
  meta    Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([enabled])
  @@map("payment_methods")
}

model ContactMessage {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  email   String @db.VarChar(255)
  message String @db.Text
  
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@map("contact_messages")
}

model Config {
  id    Int    @id @default(autoincrement())
  scope String @db.VarChar(50)
  key   String @db.VarChar(100)
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([scope, key])
  @@index([scope])
  @@map("configs")
}
